buildscript {
    ext {
        artifactoryUsername = System.getenv()['ARTIFACTORY_USER']
        artifactoryPassword = System.getenv()['ARTIFACTORY_APIKEY']
    }
    
repositories {
    maven { 
         url "https://artifactory.example.net/artifactory/my-maven-virtual"
         credentials {
                username artifactoryUsername
                password artifactoryPassword
            }
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.3.2.1'
        classpath "net.rdrei.android.buildtimetracker:gradle-plugin:0.11.0"
    }
}

}
plugins {
    id "org.sonarqube" version "2.6.1"  apply false
    id "com.bmuschko.docker-remote-api" version "3.2.5" apply false
    id "com.patdouble.awsecr" version "0.4.0" apply false
    id "com.dorongold.task-tree" version "1.3.1"
    id "org.owasp.dependencycheck" version "6.1.6"
}

apply plugin: 'groovy'
apply from: 'gradle/publish.gradle'
apply plugin: 'org.owasp.dependencycheck'
dependencyCheck {
    analyzers {
        assemblyEnabled = false
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from project.components.java
        }
            macInstaller(MavenPublication){
                artifact source: 'myapp-installer/build/install4j/work/installers/mycatalog_osx_x64.dmg', classifier: 'osx-x64',extension: 'dmg'
                artifactId 'mycatalog'
                groupId = 'com.example.dummy.installer.mac'
            }
            linuxInstaller(MavenPublication){
                artifact source: 'myapp-installer/build/install4j/work/installers/mycatalog_linux_x64.sh', classifier: 'linux-x64',extension: 'sh'
                artifactId 'mycatalog'
                groupId = 'com.example.dummy.installer.linux'
            }
            windowsInstaller(MavenPublication){
                artifact source: 'myapp-installer/build/install4j/work/installers/mycatalog_win_x64.exe', classifier: 'win-x64',extension: 'exe'
                artifactId 'mycatalog'
                groupId = 'com.example.dummy.installer.windows'
            }

    }
}

description = 'myapp Parent'

allprojects {
    group = 'com.example.ad.atl'
    version = project.version +((Boolean.parseBoolean(project.getProperty('is.beta')) || project.getProperty('is.beta') == "") ? "-SNAPSHOT":"")
    ext {
        installerVersion =project.version.minus("-SNAPSHOT")
        sha1 = System.getenv('GIT_COMMIT')
        ciBuildNumber = (System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : '0')
        versionNumber  = getSemVersionNumber(version, sha1, ciBuildNumber)
        isBeta = project.hasProperty('is.beta') && project.getProperty('is.beta') != "" ? Boolean.parseBoolean(project.getProperty('is.beta')) : true
        imageRepoSuffix = ( System.getenv('GIT_BRANCH') == null || System.getenv('GIT_BRANCH') == "master" || System.getenv('GIT_BRANCH') == "develop" ) ? "dev" : System.getenv('GIT_BRANCH')
        imageRepo = "myapp/my-catalog"+(project.isBeta ? "-" + imageRepoSuffix.replaceAll('/','-').toLowerCase() : "")
    }

}

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        prVerify
    }

    repositories {
        maven {
         url "https://artifactory.example.net/artifactory/my-maven-virtual"
         credentials {
                username artifactoryUsername
                password artifactoryPassword
            }
        }

    dependencies {
        prVerify 'com.example.demo:test-pr:3.0.5:all'
    }
}

    test {
        include '**/*Spec*'
        // uncomment if the tests reports are not generated
        // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
        // ignoreFailures true
        reports.html.enabled = true
    }

    // The following task is used to workaround an issue where if test result are not when a specific time frame then
    // the Jenkins junit plug-in will complain.
    task jenkinsTouchTest {
        inputs.files test.outputs.files
        doLast {
            def timestamp = System.currentTimeMillis()
            def testResultsDir = test.getReports().getJunitXml().getDestination()

            if (testResultsDir.exists()) {
                testResultsDir.eachFile { it.lastModified = timestamp }
            }
        }
    }
}


String getSemVersionNumber(String versionString, String sha1, String buildNumber) {
    String result = versionString
    if(deployToProd.toBoolean() == false)
        result=result+"."+buildNumber
    if(versionString.contains("SNAPSHOT"))
        result=result.minus("-SNAPSHOT")
    // include short sha1
//    if (sha1 != null && !sha1.isEmpty()) {
//        String shortSha1 = sha1.trim().substring(0, 7)
//        if (shortSha1.length() > 0) {
//            result += "-" + shortSha1
//        }
//    }

    // include build #
//    result += "-b" + buildNumber

    return result

}
apply plugin: "build-time-tracker"

buildtimetracker {
    reporters {
        summary {
            ordered false
            threshold 50
            barstyle 'unicode'
        }
    }
}
task allDependencies {
    dependsOn allprojects.collect { "$it.path:dependencies" }
}
